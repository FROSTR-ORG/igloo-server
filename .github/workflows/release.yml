name: Release

on:
  push:
    branches: [ master ]
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 1.2.0, patch, minor, major)'
        required: true
        default: 'patch'

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/master'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: Setup Bun
      uses: oven-sh/setup-bun@v2
      with:
        bun-version: latest

    - name: Install dependencies
      run: bun install --frozen-lockfile

    - name: Configure git
      run: |
        git config user.name "github-actions[bot]"
        git config user.email "github-actions[bot]@users.noreply.github.com"

    - name: Get version
      id: version
      run: |
        if [ "${{ github.event_name }}" = "workflow_dispatch" ]; then
          VERSION="${{ github.event.inputs.version }}"
        else
          # Auto-determine version based on commit messages
          if git log --format=%s -n 1 | grep -q "BREAKING CHANGE\|feat!"; then
            VERSION="major"
          elif git log --format=%s -n 1 | grep -q "^feat"; then
            VERSION="minor"
          else
            VERSION="patch"
          fi
        fi
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Update version
      id: new_version
      run: |
        NEW_VERSION=$(npm version ${{ steps.version.outputs.version }} --no-git-tag-version)
        echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
        echo "version_number=${NEW_VERSION#v}" >> $GITHUB_OUTPUT

    - name: Build application
      run: bun run build

    - name: Update changelog
      run: |
        # Create or update CHANGELOG.md
        if [ ! -f CHANGELOG.md ]; then
          echo "# CHANGELOG" > CHANGELOG.md
          echo "" >> CHANGELOG.md
        fi
        
        # Add new version entry
        DATE=$(date +%Y-%m-%d)
        sed -i "3i\\## [${{ steps.new_version.outputs.version_number }}] - $DATE\\n" CHANGELOG.md
        
        # Add commit messages since last tag
        LAST_TAG=$(git describe --tags --abbrev=0 2>/dev/null || echo "")
        if [ -n "$LAST_TAG" ]; then
          echo "### Changes since $LAST_TAG:" >> temp_changelog.md
          git log --pretty=format:"- %s" $LAST_TAG..HEAD >> temp_changelog.md
        else
          echo "### Changes:" >> temp_changelog.md
          git log --pretty=format:"- %s" -n 10 >> temp_changelog.md
        fi
        echo "" >> temp_changelog.md
        
        # Insert changes into changelog
        sed -i "/## \[${{ steps.new_version.outputs.version_number }}\]/r temp_changelog.md" CHANGELOG.md
        rm temp_changelog.md

    - name: Create release archive
      run: |
        mkdir -p release
        
        # Create source archive
        tar -czf release/igloo-server-${{ steps.new_version.outputs.version_number }}-src.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=release \
          --exclude=static/app.js \
          --exclude=static/styles.css \
          .
        
        # Create binary archive with built assets
        tar -czf release/igloo-server-${{ steps.new_version.outputs.version_number }}.tar.gz \
          --exclude=node_modules \
          --exclude=.git \
          --exclude=release \
          --exclude=frontend \
          src static package.json bun.lockb tsconfig.json dockerfile compose.yml README.md LICENSE

    - name: Commit version bump
      run: |
        git add package.json CHANGELOG.md
        git commit -m "chore: release ${{ steps.new_version.outputs.new_version }}"
        git tag ${{ steps.new_version.outputs.new_version }}
        git push origin master
        git push origin ${{ steps.new_version.outputs.new_version }}

    - name: Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.new_version.outputs.new_version }}
        release_name: Release ${{ steps.new_version.outputs.new_version }}
        body: |
          ## Changes in ${{ steps.new_version.outputs.new_version }}
          
          See [CHANGELOG.md](https://github.com/FROSTR-ORG/igloo-server/blob/main/CHANGELOG.md) for full details.
          
          ### Installation
          
          **Docker (Recommended)**:
          ```bash
          docker pull ghcr.io/frostr-org/igloo-server:${{ steps.new_version.outputs.version_number }}
          ```
          
          **From Source**:
          ```bash
          curl -L https://github.com/FROSTR-ORG/igloo-server/archive/${{ steps.new_version.outputs.new_version }}.tar.gz | tar -xz
          cd igloo-server-${{ steps.new_version.outputs.version_number }}
          bun install
          bun run build
          bun run start
          ```
        draft: false
        prerelease: false

    - name: Upload source archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/igloo-server-${{ steps.new_version.outputs.version_number }}-src.tar.gz
        asset_name: igloo-server-${{ steps.new_version.outputs.version_number }}-src.tar.gz
        asset_content_type: application/gzip

    - name: Upload binary archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release/igloo-server-${{ steps.new_version.outputs.version_number }}.tar.gz
        asset_name: igloo-server-${{ steps.new_version.outputs.version_number }}.tar.gz
        asset_content_type: application/gzip

  docker:
    runs-on: ubuntu-latest
    needs: release
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        ref: master

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Get version
      id: version
      run: |
        VERSION=$(node -p "require('./package.json').version")
        echo "version=$VERSION" >> $GITHUB_OUTPUT

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        platforms: linux/amd64,linux/arm64
        tags: |
          ghcr.io/frostr-org/igloo-server:latest
          ghcr.io/frostr-org/igloo-server:${{ steps.version.outputs.version }}
        labels: |
          org.opencontainers.image.title=Igloo Server
          org.opencontainers.image.description=A server-based signing device for the FROSTR protocol
          org.opencontainers.image.source=https://github.com/FROSTR-ORG/igloo-server
          org.opencontainers.image.version=${{ steps.version.outputs.version }}
          org.opencontainers.image.revision=${{ github.sha }}
        cache-from: type=gha
        cache-to: type=gha,mode=max 